(js-import (-dnd-context use-draggable) dnd-kit)
(js-import (use-gsap) gsap)

(defcomponent -card ((dg (use-ref))
                     (_ (use-effect
                         (lambda ()
                           (setf (@ dg current)
                                 (chain draggable
                                        (create (+ "#" (@ props id))
                                                (create
                                                 type "x,y"

                                                 live-snap
                                                 (create
                                                  x (lambda (value)
                                                      (* 50
                                                         (chain -Math (round (/ value 50)))))
                                                  y (lambda (value)
                                                      (* 50
                                                         (chain -Math (round (/ value 50)))))
                                                  radius 35)
                                                 ))
                                        0))
                           (lambda ()
                             (chain dg current (kill))))
                         (array))))
  (props)
  (psx
   (:div ((id (@ props id))
          (style (create
                  "background-color" "white"
                  "border-radius" "10px"
                  "border" "solid"
                  "border-width" "1px"
                  "position" "absolute")))
         (:img ((src (@ props img)))))))

(defcomponent -column () (props)
  (psx
   (:div ((style (create
                  "padding" "10px"
                  "margin" "5px"
                  "border" "1px solid #ccc"
                  "text-align" "center"
                  "height" "700px"

                  "width" "150px"

                  "display" "flex"
                  "justify-content" "flex-start"
                  "flex-direction" "column")))
         (loop for i from 1 to 10
               collect
               (psx
                (:-card ((idx i)
                         (id (+ (@ props id) i))
                         (img (+ "src/assets/1_" (@ props id) "_" i "@1x.png")))))))))

(defcomponent -cards (((a b) (use-state 0))) ()
  (psx
   (:div ((style (create
                  "display" "flex"
                  "justify-content" "flex-start"
                  "align-items" "flex-start"
                  "padding" "20px")))
         (let ((col 0))
           (loop for suit in '("heart" "spade" "diamond" "clover")
                 append
                 (loop for row from 1 to 13
                       collect
                       (psx (:-card (
                                     (col col)
                                     (row row)
                                     (id (+ "shit" col "_" row))
                                     (img (+ "src/assets/1_" suit "_" row "@1x.png")))))
                       finally (incf col)))))))

(defcomponent -game (((ctr set-ctr) (use-state 0))) ()
  (psx
   (:div ()
         (:-cards ()))
   (:div ((style (create
                  position "absolute"
                  left 0
                  top 0
                  "z-index" -1
                  width "100vw"
                  height "100vh"
                  background-color "rgb(36, 83, 36)"
                  background-image "url(src/assets/background_tile_transparent@2x.png)")))
         (:div ((style (create
                        "width" "100%"
                        "height" "100%"
                        "top" 0
                        "left" 0
                        "mix-blend-mode" "overlay"
                        "background" "-webkit-radial-gradient(top,ellipse farthest-corner,hsla(0,0%,100%,.16) 100%,hsla(0,0%,100%,.08) 0),-webkit-radial-gradient(top,ellipse farthest-corner,hsla(0,0%,100%,.32) 0,hsla(0,0%,100%,0) 100%),-webkit-radial-gradient(top,ellipse farthest-corner,hsla(0,0%,100%,.32) 0,hsla(0,0%,100%,0) 64%)")))))))

(let ((-app (psx
             (:-dnd-context ()
                            (:-game ())))))
  ((@ preact render) -app (@ document body)))

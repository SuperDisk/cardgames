(js-import (-dnd-context use-draggable) dnd-kit)

(defcomponent -card ((dg (use-ref))
                     (_ (use-g-s-a-p
                         (lambda (context context-safe)
                           (setf (@ dg current)
                                 (chain draggable
                                        (create (+ "#" (@ props id))
                                                (create
                                                 type "x,y"

                                                 on-press
                                                 (context-safe
                                                  (lambda ()
                                                    ((@ gsap to)
                                                     (@ dg current target)
                                                     (create
                                                      duration 0.3
                                                      scale 1.1
                                                      rotation -3
                                                      box-shadow
                                                      "0px 10px 20px rgba(0,0,0,0.3)"))))

                                                 on-drag
                                                 (lambda ()
                                                   (chain console (log "yooooo")))

                                                 on-drag-end
                                                 (lambda ()
                                                   (if (chain this (hit-test "#shit2_13" "25%"))
                                                       (alert "YOOOOOOOOo")))

                                                 on-release
                                                 (context-safe
                                                  (lambda ()
                                                    ((@ gsap to)
                                                     (@ dg current target)
                                                     (create
                                                      duration 0.3
                                                      rotation 0
                                                      scale 1
                                                      box-shadow
                                                      "0px 10px 20px rgba(0,0,0,0.1)"))
                                                    ((@ gsap to)
                                                     (@ dg current target)
                                                     (create
                                                      x 0
                                                      y 0
                                                      duration 0.5
                                                      ease "power1.inOut"))
                                                    ))))
                                        0))
                           (lambda ()
                             (chain dg current (kill))))
                         (array))))
  (props)
  (psx
   (:div ((id (@ props id))
          (style (create
                  "background-color" "white"
                  "border-radius" "10px"
                  "border" "solid"
                  "border-width" "1px"
                  "position" "absolute"
                  "left" (* (@ props col) 200)
                  "top" (* (@ props row) 50)
                  )))
         (:img ((src (@ props img)))))))

(defcomponent -cards () ()
  (psx
   (:div ((style (create
                  "display" "flex"
                  "justify-content" "flex-start"
                  "align-items" "flex-start"
                  "padding" "20px")))
         (list
          (let ((col 0))
            (loop for suit in '("heart" "spade" "diamond" "clover")
                  append
                  (loop for row from 1 to 13
                        collect
                        (psx (:-card (
                                      (col col)
                                      (row row)
                                      (id (+ "shit" col "_" row))
                                      (img (+ "src/assets/1_" suit "_" row "@1x.png")))))
                        finally (incf col))))
          (psx
           (:-card ((col 5)
                    (row 0)
                    (id (+ "shite" 5 "_" 0))
                    (img (+ "src/assets/1_" "heart" "_" 1 "@1x.png")))))))))

(defcomponent -game (((ctr set-ctr) (use-state 0))) ()
  (psx
   (:div ()
         (:-cards ()))
   (:div ((style (create
                  position "absolute"
                  left 0
                  top 0
                  "z-index" -1
                  width "100vw"
                  height "100vh"
                  background-color "rgb(36, 83, 36)"
                  background-image "url(src/assets/background_tile_transparent@2x.png)")))
         (:div ((style (create
                        "width" "100%"
                        "height" "100%"
                        "top" 0
                        "left" 0
                        "mix-blend-mode" "overlay"
                        "background" "-webkit-radial-gradient(top,ellipse farthest-corner,hsla(0,0%,100%,.16) 100%,hsla(0,0%,100%,.08) 0),-webkit-radial-gradient(top,ellipse farthest-corner,hsla(0,0%,100%,.32) 0,hsla(0,0%,100%,0) 100%),-webkit-radial-gradient(top,ellipse farthest-corner,hsla(0,0%,100%,.32) 0,hsla(0,0%,100%,0) 64%)")))))))

(let ((-app (psx
             (:-dnd-context ()
                            (:-game ())))))
  ((@ preact render) -app (@ document body)))
